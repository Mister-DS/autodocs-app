generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  repositories  Repository[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Repository {
  id          String     @id @default(cuid())
  userId      String
  githubId    Int        @unique
  name        String
  fullName    String
  description String?
  url         String
  language    String?
  isPrivate   Boolean    @default(false)
  isActive    Boolean    @default(true)
  lastSync    DateTime?
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([githubId])
}

model Document {
  id           String     @id @default(cuid())
  repositoryId String
  filePath     String
  fileName     String
  content      String     @db.Text
  summary      String?    @db.Text
  language     String?
  type         String
  
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([repositoryId, filePath])
  @@index([repositoryId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}